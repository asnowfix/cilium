// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/npds.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/lyft/protoc-gen-validate/validate"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A network policy to be enforced on the network flows to/from associated hosts.
type NetworkPolicy struct {
	// The unique identifier of the network policy.
	// Required.
	Policy uint64 `protobuf:"varint,1,opt,name=policy" json:"policy,omitempty"`
	// The identifier of a filter that enforces a subset of the policy.
	// If specified, only the subset of the policy that is to be enforced by this
	// filter is contained in `ingress` and `egress`.
	//
	// Optional. If omitted, the full policy is contained in `ingress` and
	// `egress`.
	Filter string `protobuf:"bytes,2,opt,name=filter" json:"filter,omitempty"`
	// The part of the policy to be enforced at ingress.
	// Optional.
	Ingress *DirectionNetworkPolicy `protobuf:"bytes,3,opt,name=ingress" json:"ingress,omitempty"`
	// The part of the policy to be enforced at egress.
	// Optional.
	Egress *DirectionNetworkPolicy `protobuf:"bytes,4,opt,name=egress" json:"egress,omitempty"`
}

func (m *NetworkPolicy) Reset()                    { *m = NetworkPolicy{} }
func (m *NetworkPolicy) String() string            { return proto.CompactTextString(m) }
func (*NetworkPolicy) ProtoMessage()               {}
func (*NetworkPolicy) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{0} }

func (m *NetworkPolicy) GetPolicy() uint64 {
	if m != nil {
		return m.Policy
	}
	return 0
}

func (m *NetworkPolicy) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *NetworkPolicy) GetIngress() *DirectionNetworkPolicy {
	if m != nil {
		return m.Ingress
	}
	return nil
}

func (m *NetworkPolicy) GetEgress() *DirectionNetworkPolicy {
	if m != nil {
		return m.Egress
	}
	return nil
}

// A network policy to be enforced on flows either to or from hosts.
type DirectionNetworkPolicy struct {
	// The set of per-port network policies, one per destination L4 port.
	// Every PortNetworkPolicy element in this set has a unique toPort.
	// Required and may not be empty.
	PerPortPolicies []*PortNetworkPolicy `protobuf:"bytes,1,rep,name=per_port_policies,json=perPortPolicies" json:"per_port_policies,omitempty"`
}

func (m *DirectionNetworkPolicy) Reset()                    { *m = DirectionNetworkPolicy{} }
func (m *DirectionNetworkPolicy) String() string            { return proto.CompactTextString(m) }
func (*DirectionNetworkPolicy) ProtoMessage()               {}
func (*DirectionNetworkPolicy) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{1} }

func (m *DirectionNetworkPolicy) GetPerPortPolicies() []*PortNetworkPolicy {
	if m != nil {
		return m.PerPortPolicies
	}
	return nil
}

// A network policy to be enforced on flows to a specific destination L4 port.
type PortNetworkPolicy struct {
	// The flows' destination L4 port number, as an unsigned 16-bit integer.
	// Required.
	Port uint32 `protobuf:"varint,1,opt,name=port" json:"port,omitempty"`
	// The flows' L4 transport protocol.
	// Required.
	Protocol SocketAddress_Protocol `protobuf:"varint,2,opt,name=protocol,enum=envoy.api.v2.SocketAddress_Protocol" json:"protocol,omitempty"`
	// The network policy rules to be enforced on the flows to the port.
	// A flow is allowed if any rule matches it. If no rule matches the flow, it is denied.
	// Required and may not be empty.
	Rules []*PortNetworkPolicyRule `protobuf:"bytes,3,rep,name=rules" json:"rules,omitempty"`
}

func (m *PortNetworkPolicy) Reset()                    { *m = PortNetworkPolicy{} }
func (m *PortNetworkPolicy) String() string            { return proto.CompactTextString(m) }
func (*PortNetworkPolicy) ProtoMessage()               {}
func (*PortNetworkPolicy) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{2} }

func (m *PortNetworkPolicy) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *PortNetworkPolicy) GetProtocol() SocketAddress_Protocol {
	if m != nil {
		return m.Protocol
	}
	return SocketAddress_TCP
}

func (m *PortNetworkPolicy) GetRules() []*PortNetworkPolicyRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// A network policy rule, as a conjunction of predicates on L3-L7 flows.
// If all the predicates of a rule match a flow, the flow is allowed.
type PortNetworkPolicyRule struct {
	// The set of identifiers of policies of remote hosts that are allowed by this rule.
	// This predicate matches a flow if the identifier of the policy applied on the flow's remote
	// host is contained in this set. Required and may not be empty.
	RemotePolicies []uint64 `protobuf:"varint,1,rep,packed,name=remote_policies,json=remotePolicies" json:"remote_policies,omitempty"`
	// Types that are valid to be assigned to L7Rules:
	//	*PortNetworkPolicyRule_HttpRules
	L7Rules isPortNetworkPolicyRule_L7Rules `protobuf_oneof:"l7_rules"`
}

func (m *PortNetworkPolicyRule) Reset()                    { *m = PortNetworkPolicyRule{} }
func (m *PortNetworkPolicyRule) String() string            { return proto.CompactTextString(m) }
func (*PortNetworkPolicyRule) ProtoMessage()               {}
func (*PortNetworkPolicyRule) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{3} }

type isPortNetworkPolicyRule_L7Rules interface {
	isPortNetworkPolicyRule_L7Rules()
}

type PortNetworkPolicyRule_HttpRules struct {
	HttpRules *HttpNetworkPolicyRules `protobuf:"bytes,100,opt,name=http_rules,json=httpRules,oneof"`
}

func (*PortNetworkPolicyRule_HttpRules) isPortNetworkPolicyRule_L7Rules() {}

func (m *PortNetworkPolicyRule) GetL7Rules() isPortNetworkPolicyRule_L7Rules {
	if m != nil {
		return m.L7Rules
	}
	return nil
}

func (m *PortNetworkPolicyRule) GetRemotePolicies() []uint64 {
	if m != nil {
		return m.RemotePolicies
	}
	return nil
}

func (m *PortNetworkPolicyRule) GetHttpRules() *HttpNetworkPolicyRules {
	if x, ok := m.GetL7Rules().(*PortNetworkPolicyRule_HttpRules); ok {
		return x.HttpRules
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PortNetworkPolicyRule) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PortNetworkPolicyRule_OneofMarshaler, _PortNetworkPolicyRule_OneofUnmarshaler, _PortNetworkPolicyRule_OneofSizer, []interface{}{
		(*PortNetworkPolicyRule_HttpRules)(nil),
	}
}

func _PortNetworkPolicyRule_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PortNetworkPolicyRule)
	// l7_rules
	switch x := m.L7Rules.(type) {
	case *PortNetworkPolicyRule_HttpRules:
		b.EncodeVarint(100<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpRules); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PortNetworkPolicyRule.L7Rules has unexpected type %T", x)
	}
	return nil
}

func _PortNetworkPolicyRule_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PortNetworkPolicyRule)
	switch tag {
	case 100: // l7_rules.http_rules
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HttpNetworkPolicyRules)
		err := b.DecodeMessage(msg)
		m.L7Rules = &PortNetworkPolicyRule_HttpRules{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PortNetworkPolicyRule_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PortNetworkPolicyRule)
	// l7_rules
	switch x := m.L7Rules.(type) {
	case *PortNetworkPolicyRule_HttpRules:
		s := proto.Size(x.HttpRules)
		n += proto.SizeVarint(100<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A set of network policy rules enforced on HTTP requests.
type HttpNetworkPolicyRules struct {
	// The set of HTTP network policy rules.
	// If any rule matches a request, the request is allowed. Otherwise, it is denied.
	// Required and may not be empty.
	HttpRules []*HttpNetworkPolicyRule `protobuf:"bytes,1,rep,name=http_rules,json=httpRules" json:"http_rules,omitempty"`
}

func (m *HttpNetworkPolicyRules) Reset()                    { *m = HttpNetworkPolicyRules{} }
func (m *HttpNetworkPolicyRules) String() string            { return proto.CompactTextString(m) }
func (*HttpNetworkPolicyRules) ProtoMessage()               {}
func (*HttpNetworkPolicyRules) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{4} }

func (m *HttpNetworkPolicyRules) GetHttpRules() []*HttpNetworkPolicyRule {
	if m != nil {
		return m.HttpRules
	}
	return nil
}

// An HTTP network policy rule, as a conjunction of predicates on HTTP requests.
// If all the predicates of a rule match an HTTP request, the request is allowed. Otherwise, it is
// denied.
type HttpNetworkPolicyRule struct {
	// A set of matchers on the HTTP request's headers' names and values.
	// If all the matchers in this set match an HTTP request, the request is allowed by this rule.
	// Otherwise, it is denied.
	//
	// Some special header names are:
	//
	// * *:uri*: The HTTP request's URI.
	// * *:method*: The HTTP request's method.
	// * *:authority*: Also maps to the HTTP 1.1 *Host* header.
	//
	// Optional. If empty, matches any HTTP request.
	Headers []*HeaderMatcher `protobuf:"bytes,1,rep,name=headers" json:"headers,omitempty"`
}

func (m *HttpNetworkPolicyRule) Reset()                    { *m = HttpNetworkPolicyRule{} }
func (m *HttpNetworkPolicyRule) String() string            { return proto.CompactTextString(m) }
func (*HttpNetworkPolicyRule) ProtoMessage()               {}
func (*HttpNetworkPolicyRule) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{5} }

func (m *HttpNetworkPolicyRule) GetHeaders() []*HeaderMatcher {
	if m != nil {
		return m.Headers
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkPolicy)(nil), "envoy.api.v2.NetworkPolicy")
	proto.RegisterType((*DirectionNetworkPolicy)(nil), "envoy.api.v2.DirectionNetworkPolicy")
	proto.RegisterType((*PortNetworkPolicy)(nil), "envoy.api.v2.PortNetworkPolicy")
	proto.RegisterType((*PortNetworkPolicyRule)(nil), "envoy.api.v2.PortNetworkPolicyRule")
	proto.RegisterType((*HttpNetworkPolicyRules)(nil), "envoy.api.v2.HttpNetworkPolicyRules")
	proto.RegisterType((*HttpNetworkPolicyRule)(nil), "envoy.api.v2.HttpNetworkPolicyRule")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NetworkPolicyDiscoveryService service

type NetworkPolicyDiscoveryServiceClient interface {
	StreamNetworkPolicies(ctx context.Context, opts ...grpc.CallOption) (NetworkPolicyDiscoveryService_StreamNetworkPoliciesClient, error)
	FetchNetworkPolicies(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error)
}

type networkPolicyDiscoveryServiceClient struct {
	cc *grpc.ClientConn
}

func NewNetworkPolicyDiscoveryServiceClient(cc *grpc.ClientConn) NetworkPolicyDiscoveryServiceClient {
	return &networkPolicyDiscoveryServiceClient{cc}
}

func (c *networkPolicyDiscoveryServiceClient) StreamNetworkPolicies(ctx context.Context, opts ...grpc.CallOption) (NetworkPolicyDiscoveryService_StreamNetworkPoliciesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkPolicyDiscoveryService_serviceDesc.Streams[0], c.cc, "/envoy.api.v2.NetworkPolicyDiscoveryService/StreamNetworkPolicies", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkPolicyDiscoveryServiceStreamNetworkPoliciesClient{stream}
	return x, nil
}

type NetworkPolicyDiscoveryService_StreamNetworkPoliciesClient interface {
	Send(*DiscoveryRequest) error
	Recv() (*DiscoveryResponse, error)
	grpc.ClientStream
}

type networkPolicyDiscoveryServiceStreamNetworkPoliciesClient struct {
	grpc.ClientStream
}

func (x *networkPolicyDiscoveryServiceStreamNetworkPoliciesClient) Send(m *DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *networkPolicyDiscoveryServiceStreamNetworkPoliciesClient) Recv() (*DiscoveryResponse, error) {
	m := new(DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkPolicyDiscoveryServiceClient) FetchNetworkPolicies(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error) {
	out := new(DiscoveryResponse)
	err := grpc.Invoke(ctx, "/envoy.api.v2.NetworkPolicyDiscoveryService/FetchNetworkPolicies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetworkPolicyDiscoveryService service

type NetworkPolicyDiscoveryServiceServer interface {
	StreamNetworkPolicies(NetworkPolicyDiscoveryService_StreamNetworkPoliciesServer) error
	FetchNetworkPolicies(context.Context, *DiscoveryRequest) (*DiscoveryResponse, error)
}

func RegisterNetworkPolicyDiscoveryServiceServer(s *grpc.Server, srv NetworkPolicyDiscoveryServiceServer) {
	s.RegisterService(&_NetworkPolicyDiscoveryService_serviceDesc, srv)
}

func _NetworkPolicyDiscoveryService_StreamNetworkPolicies_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetworkPolicyDiscoveryServiceServer).StreamNetworkPolicies(&networkPolicyDiscoveryServiceStreamNetworkPoliciesServer{stream})
}

type NetworkPolicyDiscoveryService_StreamNetworkPoliciesServer interface {
	Send(*DiscoveryResponse) error
	Recv() (*DiscoveryRequest, error)
	grpc.ServerStream
}

type networkPolicyDiscoveryServiceStreamNetworkPoliciesServer struct {
	grpc.ServerStream
}

func (x *networkPolicyDiscoveryServiceStreamNetworkPoliciesServer) Send(m *DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *networkPolicyDiscoveryServiceStreamNetworkPoliciesServer) Recv() (*DiscoveryRequest, error) {
	m := new(DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NetworkPolicyDiscoveryService_FetchNetworkPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkPolicyDiscoveryServiceServer).FetchNetworkPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/envoy.api.v2.NetworkPolicyDiscoveryService/FetchNetworkPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkPolicyDiscoveryServiceServer).FetchNetworkPolicies(ctx, req.(*DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkPolicyDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.api.v2.NetworkPolicyDiscoveryService",
	HandlerType: (*NetworkPolicyDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchNetworkPolicies",
			Handler:    _NetworkPolicyDiscoveryService_FetchNetworkPolicies_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamNetworkPolicies",
			Handler:       _NetworkPolicyDiscoveryService_StreamNetworkPolicies_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/npds.proto",
}

func init() { proto.RegisterFile("api/npds.proto", fileDescriptor11) }

var fileDescriptor11 = []byte{
	// 576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xee, 0x24, 0x6e, 0x9a, 0x9e, 0xde, 0xd4, 0xf9, 0xff, 0x04, 0x2b, 0x40, 0x13, 0xb9, 0x2c,
	0x42, 0x17, 0x09, 0x0a, 0xaa, 0x90, 0x2a, 0x84, 0x20, 0x6a, 0x51, 0x37, 0x44, 0x91, 0xb3, 0x40,
	0x62, 0x41, 0x64, 0xec, 0x43, 0x32, 0xaa, 0xeb, 0x99, 0x8e, 0x27, 0x46, 0xd9, 0x56, 0x3c, 0x41,
	0x79, 0x02, 0x5e, 0x03, 0x09, 0x89, 0x77, 0xe0, 0x15, 0xd8, 0xf0, 0x14, 0x45, 0xe3, 0x4b, 0x5b,
	0xa7, 0x46, 0x08, 0x89, 0xdd, 0xcc, 0x39, 0xdf, 0x65, 0xce, 0x37, 0x63, 0xc3, 0xa6, 0x23, 0x58,
	0x37, 0x10, 0x5e, 0xd8, 0x11, 0x92, 0x2b, 0x4e, 0xd7, 0x31, 0x88, 0xf8, 0xbc, 0xe3, 0x08, 0xd6,
	0x89, 0x7a, 0x8d, 0x6d, 0xdd, 0x75, 0x3c, 0x4f, 0x62, 0x98, 0x02, 0x1a, 0xff, 0xe9, 0x92, 0xc7,
	0x42, 0x97, 0x47, 0x28, 0xe7, 0x69, 0x71, 0x43, 0x17, 0x65, 0x26, 0xd2, 0xb8, 0x37, 0xe1, 0x7c,
	0xe2, 0x63, 0x37, 0x66, 0x07, 0x01, 0x57, 0x8e, 0x62, 0x3c, 0xc8, 0xba, 0x77, 0x22, 0xc7, 0x67,
	0x9e, 0xa3, 0xb0, 0x9b, 0x2d, 0x92, 0x86, 0xf5, 0x95, 0xc0, 0xc6, 0x00, 0xd5, 0x07, 0x2e, 0x4f,
	0x86, 0xdc, 0x67, 0xee, 0x9c, 0xd6, 0xa1, 0x22, 0xe2, 0x95, 0x49, 0x5a, 0xa4, 0x6d, 0xd8, 0xe9,
	0x4e, 0xd7, 0xdf, 0x33, 0x5f, 0xa1, 0x34, 0x4b, 0x2d, 0xd2, 0x5e, 0xb5, 0xd3, 0x1d, 0x7d, 0x06,
	0x2b, 0x2c, 0x98, 0xe8, 0xd3, 0x9a, 0xe5, 0x16, 0x69, 0xaf, 0xf5, 0x1e, 0x74, 0x6e, 0xce, 0xd3,
	0x39, 0x64, 0x12, 0x5d, 0x7d, 0x96, 0x9c, 0x8d, 0x9d, 0x91, 0xe8, 0x53, 0xa8, 0x60, 0x42, 0x37,
	0xfe, 0x82, 0x9e, 0x72, 0xac, 0x33, 0xa8, 0x17, 0x23, 0xe8, 0x6b, 0xd8, 0x16, 0x28, 0xc7, 0x82,
	0x4b, 0x35, 0x8e, 0x47, 0x60, 0x18, 0x9a, 0xa4, 0x55, 0x6e, 0xaf, 0xf5, 0x9a, 0x79, 0x8b, 0x21,
	0x97, 0x2a, 0xc7, 0xed, 0xc3, 0x97, 0x9f, 0xdf, 0xca, 0xcb, 0x17, 0xa4, 0x54, 0x25, 0xf6, 0x96,
	0x40, 0xa9, 0x11, 0xc3, 0x54, 0x43, 0x47, 0xb6, 0x7d, 0x8b, 0x42, 0x9b, 0x60, 0x68, 0xab, 0x38,
	0xb4, 0x8d, 0xfe, 0x9a, 0x16, 0xa8, 0xec, 0x19, 0xe6, 0xe5, 0x65, 0xd9, 0x8e, 0x1b, 0xf4, 0x39,
	0x54, 0xe3, 0xc8, 0x5d, 0xee, 0xc7, 0x09, 0x6e, 0x2e, 0x4e, 0x3a, 0xe2, 0xee, 0x09, 0xaa, 0x17,
	0xe9, 0xcd, 0x0f, 0x53, 0xac, 0x7d, 0xc5, 0xa2, 0x47, 0xb0, 0x2c, 0x67, 0x3e, 0xea, 0x9c, 0xf5,
	0x14, 0xbb, 0x7f, 0x98, 0xc2, 0x9e, 0xf9, 0x98, 0x9b, 0x24, 0x61, 0x5b, 0x9f, 0x09, 0xd4, 0x0a,
	0xc1, 0x74, 0x1f, 0xb6, 0x24, 0x9e, 0x72, 0x85, 0xf9, 0xc0, 0x8c, 0xfe, 0xba, 0x56, 0x59, 0xb9,
	0x20, 0x46, 0x95, 0x98, 0xc4, 0xde, 0x4c, 0x40, 0x59, 0x20, 0xf4, 0x08, 0x60, 0xaa, 0x94, 0x18,
	0x27, 0x87, 0xf3, 0x8a, 0x6e, 0xf1, 0x58, 0x29, 0x71, 0xcb, 0x2f, 0x3c, 0x5e, 0xb2, 0x57, 0x35,
	0x33, 0xde, 0xf4, 0x01, 0xaa, 0xfe, 0x93, 0x44, 0xc4, 0x9a, 0x42, 0xbd, 0x98, 0x42, 0x07, 0x39,
	0x33, 0x52, 0x94, 0x44, 0x21, 0x33, 0x97, 0xc4, 0xb5, 0xab, 0x35, 0x80, 0x5a, 0x21, 0x9e, 0xee,
	0xc3, 0xca, 0x14, 0x1d, 0x0f, 0x65, 0xe6, 0x72, 0x77, 0xc1, 0x25, 0x6e, 0xbe, 0x72, 0x94, 0x3b,
	0x45, 0x69, 0x67, 0xd8, 0xde, 0xc7, 0x12, 0xdc, 0xcf, 0x89, 0x1d, 0x66, 0xdf, 0xed, 0x08, 0x65,
	0xc4, 0x5c, 0xa4, 0x6f, 0xa1, 0x36, 0x52, 0x12, 0x9d, 0xd3, 0x9b, 0x30, 0x9d, 0xe3, 0xce, 0xe2,
	0xcb, 0x4f, 0x89, 0x36, 0x9e, 0xcd, 0x30, 0x54, 0x8d, 0xe6, 0x6f, 0xfb, 0xa1, 0xe0, 0x41, 0x88,
	0xd6, 0x52, 0x9b, 0x3c, 0x22, 0xf4, 0x9c, 0xc0, 0xff, 0x2f, 0x51, 0xb9, 0xd3, 0x7f, 0xae, 0xff,
	0xf0, 0xfc, 0xfb, 0x8f, 0x4f, 0xa5, 0x5d, 0x6b, 0xa7, 0x1b, 0xf5, 0xae, 0xff, 0x47, 0x07, 0x41,
	0xe2, 0x73, 0xf5, 0x68, 0x0e, 0xc8, 0x5e, 0x7f, 0xf9, 0x4d, 0xd9, 0x11, 0xec, 0x5d, 0x25, 0x7e,
	0xbc, 0x8f, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x73, 0x6a, 0x2a, 0xff, 0xf3, 0x04, 0x00, 0x00,
}
